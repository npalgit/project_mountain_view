project_mountain_view/array/addBin.py:15:REDO: do it recursively
project_mountain_view/array/bestTimeToBuySellStock.py:16:REDO: didn't figure out the trick right away. should do this very fast
project_mountain_view/array/bestTimeToBuySellStockMultiple.py:12:REDO: figure out the rule fast
project_mountain_view/array/firstMissingPos.py:11:REDO: need to figure out the trick first try. the corner cases on annoying.
project_mountain_view/array/fourSums.py:16:REDO. even tho got this on the first try, after doing 3Sum, avoid duplicates annoying
project_mountain_view/array/gasStation.py:12:REDO: need to find the pattern. I don't like this question that much. need to solve with no hints
project_mountain_view/array/jumpGame.py:12:REDO: maybe not top priority, its like the max subarray problem. Do it without looking at the solution.
project_mountain_view/array/longestNonRepeatingSubstring.py:15:REDO for better practice.
project_mountain_view/array/majorityElements.py:9:REDO: moore's majority algo
project_mountain_view/array/maxProductSubArray.py:9:REDO
project_mountain_view/array/medianTwoSortedArray.py:18:REDO this problem
project_mountain_view/array/minSubarraySum.py:14:REDO: optional, look up O(nlog(n)) solution.
project_mountain_view/array/minWindowSubstr.py:18:REDO: must get slide window first try
project_mountain_view/array/nextPerm.py:78:REDO: smart algo
project_mountain_view/array/removeDuplicatesTwo.py:12:REDO: same principle applies to remove 3 or 4
project_mountain_view/array/removeElement.py:13:REDO: do it fast in the most efficient solution. And fix removeElement2
project_mountain_view/array/rotateArr.py:11:REDO: the method with mod.
project_mountain_view/array/slidingMaxWin.py:21:REDO: good use of deque
project_mountain_view/array/sortColors.py:11:REDO: many different algorithms. a few more than these. Do this without looking at sol. also dutch national flag. Four way partition?
project_mountain_view/array/threeSums.py:16:REDO defintily
project_mountain_view/array/threeSumsClosest.py:10:REDO, and also all the sums. And various solutions.
project_mountain_view/backtracking/combinations.py:19:REDO: this as a series of backtracking
project_mountain_view/backtracking/comboSum.py:4:REDO: good question to redo. DP is actually slower. Also redo backtracking
project_mountain_view/backtracking/comboSumDup.py:20:REDO: good structure for backtracking. redo with dp
project_mountain_view/backtracking/nQueens.py:5:REDO: the backtrack solution.
project_mountain_view/backtracking/palindromePartition.py:15:REDO: go over all the backtracking problems
project_mountain_view/backtracking/permutationDup.py:13:REDO: figure out the correct condition
project_mountain_view/backtracking/sudokuSolver.py:7:REDO: good quesiton to get re-acquinted with. did not struggle too much.
project_mountain_view/backtracking/wordBreak2.py:13:REDO: dfs_mem, bfs_mem, time complexity
project_mountain_view/dynamicProgramming/distinctSubsequence.py:12:REDO: and similar ones
project_mountain_view/dynamicProgramming/editDistance.py:12:REDO
project_mountain_view/dynamicProgramming/maximalRectangle.py:14:REDO: know how to do maxHistogram first. Then just read over the solution. no need to code everything.
project_mountain_view/dynamicProgramming/regxMatching.py:21:REDO- dp is a little bit complicated with details, this is really a difficult one
project_mountain_view/dynamicProgramming/shortestPalinPartition.py:10:REDO: review both solutions, optionally coding them.
project_mountain_view/dynamicProgramming/wildCardMatching.py:5:REDO: quick for practice. notice the special case invovles preprocessing.
project_mountain_view/graph/clonegraph.py:18:REDO: Need to get this first try also do BFS.
project_mountain_view/graph/jumpGame2.py:15:REDO: go over bfs solution.
project_mountain_view/graph/sorroundedRegion.py:18:REDO: classic question no need to recode, be familiar with it
project_mountain_view/graph/wordSearch.py:27:REDO: need to figure out the correct approach first
project_mountain_view/linkedList/linkedlistjoint.py:13:REDO: the short code
project_mountain_view/linkedList/mergeTwoSortedList.py:7:possibly REDO. recursion is very smart. Try to do iteratively
project_mountain_view/linkedList/reverseInKGrp.py:18:REDO: optionally, do it recursively. Learn how to reverse in one liner.
project_mountain_view/linkedList/rotateList.py:10:REDO: clever solution
project_mountain_view/misc/candy.py:11:REDO
project_mountain_view/misc/divideTwoInts.py:8:REDO: sol very efficient way of dividing.
project_mountain_view/misc/factorialTrailingZeros.py:7:REDO
project_mountain_view/misc/generateParentheses.py:15:REDO - really good question
project_mountain_view/misc/groupAnagrams.py:14:leetcode #49, maybe REDO, to get familiar with python trick syntax
project_mountain_view/misc/insertIntervals.py:15:#REDO: remember try not to do it in place
project_mountain_view/misc/largestNumbers.py:10:REDO: quickly briefly know how to implement
project_mountain_view/misc/longestConseqSeq.py:13:REDO: unique algo never seen before, know both algos
project_mountain_view/misc/longestValidParentheses.py:11:REDO: everything. very tricky
project_mountain_view/misc/lru_cache.py:6:REDO: review the trick, as it is a common interview question.
project_mountain_view/misc/palinNum.py:9:REDO
project_mountain_view/misc/permutationSequence.py:17:REDO: smart algorithm and index manipulation
project_mountain_view/misc/pow.py:6:REDO: good to redo, to know how to implement with closed eyes.
project_mountain_view/misc/scrambleString.py:6:REDO: learn the logic, no necessarily re-write everything
project_mountain_view/misc/sqrt.py:6:REDO: many smart solutions, try newton method optional
project_mountain_view/search/findMinInSortedArray.py:12:REDO: need to figure this out fast with no hint
project_mountain_view/search/findPeakElement.py:12:#REDO: this and all similar bin search problem
project_mountain_view/search/searchInsertPosition.py:14:REDO: Do it in log(n) different binary search methods.
project_mountain_view/search/searchRange.py:15:REDO: this is based on insert pos. good question
project_mountain_view/search/searchRotatedArray.py:8:REDO: maybe, got it first try. Do it both iteratively, smartly solution, and 2ndBestSolution
project_mountain_view/search/searchRotatedArrayDuplicates.py:9:REDO: need to figure out the sol on your own this along with #33
project_mountain_view/stack/largestHistogram.py:12:REDO: related to 42, make sure can do both solutions and know the difference
project_mountain_view/stack/minStack.py:19:REDO: figure out how to keep min for all stack
project_mountain_view/stack/simplyfyPath.py:10:REDO: maybe using stack is smart, did not think of it first try. Figured out the solution once knowing to use stack. simplier solution
project_mountain_view/stack/trappingWater.py:9:REDO: really proud, solved this myself. But redo for review
project_mountain_view/string/reverseWordsInStr.py:12:REDO: part where clean space happens
project_mountain_view/trees/bstIterator.py:11:REDO: must know
project_mountain_view/trees/buildTreePreInorder.py:5:REDO: can't find the trick right away. Very smart solution
project_mountain_view/trees/buildUniqueBST.py:14:REDO: must know
project_mountain_view/trees/countUniqueBST.py:15:REDO: figured out self with hints. must know
project_mountain_view/trees/inOrderTrav.py:5:REDO iterative.
project_mountain_view/trees/linkedlistToBST.py:6:REDO: got O(nlogn) right away. review with O(n). Also notice pointer doesn't work in python
project_mountain_view/trees/maxSumPath.py:16:REDO: tricky question with clear algorithm. This is a hard question
project_mountain_view/trees/nextRightPointer.py:19:REDO: quickly the iterative, sol with O(1) space.
project_mountain_view/trees/nextRightPointerAnyTree.py:24:REDO: tricky algo.
project_mountain_view/trees/postOrderTrav.py:6:REDO: as part of review for different traversal techniques. and iterative procedure as well
project_mountain_view/trees/recoverTree.py:11:#REDO: know how the algo works, no need to recode everything.
project_mountain_view/trees/rightView.py:15:#REDO: learn the trick quickly, cleaver algo
project_mountain_view/trees/sumRoot2LeafNumbers.py:19:REDO: Do this fast, review. Got this after seeing the interesting algorithm
project_mountain_view/trees/treeToLinkedList.py:26:REDO: smart solution
project_mountain_view/trees/zigZagTraverse.py:20:REDO: make sure can do this first try. should be fast
