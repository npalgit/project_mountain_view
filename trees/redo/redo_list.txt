bstIterator.py:11:REDO: must know
buildTreePreInorder.py:5:REDO: can't find the trick right away. Very smart solution
buildUniqueBST.py:14:REDO: must know
countUniqueBST.py:15:REDO: figured out self with hints. must know
inOrderTrav.py:5:REDO iterative.
kthSmallest.py:5:REDO: the other two methods. the current one is great.
linkedlistToBST.py:6:REDO: got O(nlogn) right away. review with O(n). Also notice pointer doesn't work in python
maxSumPath.py:16:REDO: tricky question with clear algorithm. This is a hard question
nextRightPointer.py:19:REDO: quickly the iterative, sol with O(1) space.
nextRightPointerAnyTree.py:24:REDO: tricky algo.
postOrderTrav.py:6:REDO: as part of review for different traversal techniques. and iterative procedure as well
recoverTree.py:11:#REDO: know how the algo works, no need to recode everything.
rightView.py:15:#REDO: learn the trick quickly, cleaver algo
sumRoot2LeafNumbers.py:19:REDO: Do this fast, review. Got this after seeing the interesting algorithm
treeToLinkedList.py:26:REDO: smart solution
zigZagTraverse.py:20:REDO: make sure can do this first try. should be fast

# redo 16/33
